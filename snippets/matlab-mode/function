# -*- mode: snippet -*-
# name : function .. end
# --
function [$1] = ${2:`(file-name-nondirectory (file-name-sans-extension
                        (if (buffer-file-name)
                              (buffer-file-name) "function")))`}($3)
    % $4
    %
    % [$1] = $2($3)
    ${3:$
      (let*
        ((indent
            (concat "\n" (make-string 1 37)))
           (args
            (mapconcat
             '(lambda (x)
                (if (not (string= (nth 0 x) ""))
                    (concat " - " (nth 0 x) ":")))
             (mapcar
              '(lambda (x)
                 (mapcar
                  '(lambda (x)
                     (replace-regexp-in-string "[[:blank:]]*$" ""
                      (replace-regexp-in-string "^[[:blank:]]*" "" x)))
                  x))
              (mapcar '(lambda (x) (split-string x "="))
                      (split-string text ",")))
             indent)))
      (if (string= args "")
          (make-string 1 37)
        (mapconcat
         'identity
         (list "%" " @Params:" args )
         indent)))
    }
    ${1:$
      (let*
        ((indent
            (concat "\n" (make-string 1 37)))
           (args
            (mapconcat
             '(lambda (x)
                (if (not (string= (nth 0 x) ""))
                    (concat " - " (nth 0 x) ":")))
             (mapcar
              '(lambda (x)
                 (mapcar
                  '(lambda (x)
                     (replace-regexp-in-string "[[:blank:]]*$" ""
                      (replace-regexp-in-string "^[[:blank:]]*" "" x)))
                  x))
              (mapcar '(lambda (x) (split-string x "="))
                      (split-string text ",")))
             indent)))
      (if (string= args "")
          (make-string 1 37)
        (mapconcat
         'identity
         (list "%" " @Returns:" args )
         indent)))
    }
    %
    $0
end
